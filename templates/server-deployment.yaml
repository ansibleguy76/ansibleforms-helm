apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: server
    spec:
      containers:
        - image: {{ .Values.container.server.image }}
          name: server
          ports:
            - containerPort: {{ if eq (toString .Values.env.HTTPS) "1" }}443{{ else }}80{{ end }}
          env:
            - name: PORT
              value: "{{ if eq (toString .Values.env.HTTPS) "1" }}443{{ else }}80{{ end }}"
            # Standard env vars from values.yaml
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
            - name: DB_HOST
              value: mysql # is internal pod connection
            - name: DB_PORT
              value: "3306"
            # Sensitive values from secrets
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: DB_PASSWORD
            - name: ENCRYPTION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: ENCRYPTION_SECRET
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: ADMIN_USERNAME
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: ADMIN_PASSWORD
          resources:
            limits:
              cpu: {{ .Values.container.server.resources.limits.cpu }}
              memory: {{ .Values.container.server.resources.limits.memory }}
            requests:
              cpu: {{ .Values.container.server.resources.requests.cpu }}
              memory: {{ .Values.container.server.resources.requests.memory }}
          stdin: true
          tty: true
          volumeMounts:
            - mountPath: /app/dist/persistent
              name: server-persistent-storage
          imagePullPolicy: Always
      restartPolicy: Always
      volumes:
        - name: server-persistent-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-server-pvc
